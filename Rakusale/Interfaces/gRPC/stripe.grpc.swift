//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: stripe.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import Dispatch
import SwiftGRPC
import SwiftProtobuf

internal protocol Stripe_StripesAddAccountCall: ClientCallUnary {}

fileprivate final class Stripe_StripesAddAccountCallBase: ClientCallUnaryBase<Stripe_AddAccountRequest, Stripe_AddAccountResponse>, Stripe_StripesAddAccountCall {
  override class var method: String { return "/stripe.Stripes/AddAccount" }
}

internal protocol Stripe_StripesAddCreditCall: ClientCallUnary {}

fileprivate final class Stripe_StripesAddCreditCallBase: ClientCallUnaryBase<Stripe_AddCreditRequest, Stripe_AddCreditResponse>, Stripe_StripesAddCreditCall {
  override class var method: String { return "/stripe.Stripes/AddCredit" }
}

internal protocol Stripe_StripesAddChargeCall: ClientCallUnary {}

fileprivate final class Stripe_StripesAddChargeCallBase: ClientCallUnaryBase<Stripe_AddChargeRequest, Stripe_AddChargeResponse>, Stripe_StripesAddChargeCall {
  override class var method: String { return "/stripe.Stripes/AddCharge" }
}


/// Instantiate Stripe_StripesServiceClient, then call methods of this protocol to make API calls.
internal protocol Stripe_StripesService: ServiceClient {
  /// Synchronous. Unary.
  func addAccount(_ request: Stripe_AddAccountRequest) throws -> Stripe_AddAccountResponse
  /// Asynchronous. Unary.
  func addAccount(_ request: Stripe_AddAccountRequest, completion: @escaping (Stripe_AddAccountResponse?, CallResult) -> Void) throws -> Stripe_StripesAddAccountCall

  /// Synchronous. Unary.
  func addCredit(_ request: Stripe_AddCreditRequest) throws -> Stripe_AddCreditResponse
  /// Asynchronous. Unary.
  func addCredit(_ request: Stripe_AddCreditRequest, completion: @escaping (Stripe_AddCreditResponse?, CallResult) -> Void) throws -> Stripe_StripesAddCreditCall

  /// Synchronous. Unary.
  func addCharge(_ request: Stripe_AddChargeRequest) throws -> Stripe_AddChargeResponse
  /// Asynchronous. Unary.
  func addCharge(_ request: Stripe_AddChargeRequest, completion: @escaping (Stripe_AddChargeResponse?, CallResult) -> Void) throws -> Stripe_StripesAddChargeCall

}

internal final class Stripe_StripesServiceClient: ServiceClientBase, Stripe_StripesService {
  /// Synchronous. Unary.
  internal func addAccount(_ request: Stripe_AddAccountRequest) throws -> Stripe_AddAccountResponse {
    return try Stripe_StripesAddAccountCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func addAccount(_ request: Stripe_AddAccountRequest, completion: @escaping (Stripe_AddAccountResponse?, CallResult) -> Void) throws -> Stripe_StripesAddAccountCall {
    return try Stripe_StripesAddAccountCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func addCredit(_ request: Stripe_AddCreditRequest) throws -> Stripe_AddCreditResponse {
    return try Stripe_StripesAddCreditCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func addCredit(_ request: Stripe_AddCreditRequest, completion: @escaping (Stripe_AddCreditResponse?, CallResult) -> Void) throws -> Stripe_StripesAddCreditCall {
    return try Stripe_StripesAddCreditCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func addCharge(_ request: Stripe_AddChargeRequest) throws -> Stripe_AddChargeResponse {
    return try Stripe_StripesAddChargeCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func addCharge(_ request: Stripe_AddChargeRequest, completion: @escaping (Stripe_AddChargeResponse?, CallResult) -> Void) throws -> Stripe_StripesAddChargeCall {
    return try Stripe_StripesAddChargeCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

}

/// To build a server, implement a class that conforms to this protocol.
/// If one of the methods returning `ServerStatus?` returns nil,
/// it is expected that you have already returned a status to the client by means of `session.close`.
internal protocol Stripe_StripesProvider: ServiceProvider {
  func addAccount(request: Stripe_AddAccountRequest, session: Stripe_StripesAddAccountSession) throws -> Stripe_AddAccountResponse
  func addCredit(request: Stripe_AddCreditRequest, session: Stripe_StripesAddCreditSession) throws -> Stripe_AddCreditResponse
  func addCharge(request: Stripe_AddChargeRequest, session: Stripe_StripesAddChargeSession) throws -> Stripe_AddChargeResponse
}

extension Stripe_StripesProvider {
  internal var serviceName: String { return "stripe.Stripes" }

  /// Determines and calls the appropriate request handler, depending on the request's method.
  /// Throws `HandleMethodError.unknownMethod` for methods not handled by this service.
  internal func handleMethod(_ method: String, handler: Handler) throws -> ServerStatus? {
    switch method {
    case "/stripe.Stripes/AddAccount":
      return try Stripe_StripesAddAccountSessionBase(
        handler: handler,
        providerBlock: { try self.addAccount(request: $0, session: $1 as! Stripe_StripesAddAccountSessionBase) })
          .run()
    case "/stripe.Stripes/AddCredit":
      return try Stripe_StripesAddCreditSessionBase(
        handler: handler,
        providerBlock: { try self.addCredit(request: $0, session: $1 as! Stripe_StripesAddCreditSessionBase) })
          .run()
    case "/stripe.Stripes/AddCharge":
      return try Stripe_StripesAddChargeSessionBase(
        handler: handler,
        providerBlock: { try self.addCharge(request: $0, session: $1 as! Stripe_StripesAddChargeSessionBase) })
          .run()
    default:
      throw HandleMethodError.unknownMethod
    }
  }
}

internal protocol Stripe_StripesAddAccountSession: ServerSessionUnary {}

fileprivate final class Stripe_StripesAddAccountSessionBase: ServerSessionUnaryBase<Stripe_AddAccountRequest, Stripe_AddAccountResponse>, Stripe_StripesAddAccountSession {}

internal protocol Stripe_StripesAddCreditSession: ServerSessionUnary {}

fileprivate final class Stripe_StripesAddCreditSessionBase: ServerSessionUnaryBase<Stripe_AddCreditRequest, Stripe_AddCreditResponse>, Stripe_StripesAddCreditSession {}

internal protocol Stripe_StripesAddChargeSession: ServerSessionUnary {}

fileprivate final class Stripe_StripesAddChargeSessionBase: ServerSessionUnaryBase<Stripe_AddChargeRequest, Stripe_AddChargeResponse>, Stripe_StripesAddChargeSession {}

