//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: entry.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import Dispatch
import SwiftGRPC
import SwiftProtobuf

internal protocol Entry_EntrysSignInCall: ClientCallUnary {}

fileprivate final class Entry_EntrysSignInCallBase: ClientCallUnaryBase<Entry_SignInRequest, Entry_EntryResponse>, Entry_EntrysSignInCall {
  override class var method: String { return "/entry.Entrys/SignIn" }
}

internal protocol Entry_EntrysSignUpCall: ClientCallUnary {}

fileprivate final class Entry_EntrysSignUpCallBase: ClientCallUnaryBase<Entry_SignUpRequest, Entry_EntryResponse>, Entry_EntrysSignUpCall {
  override class var method: String { return "/entry.Entrys/SignUp" }
}


/// Instantiate Entry_EntrysServiceClient, then call methods of this protocol to make API calls.
internal protocol Entry_EntrysService: ServiceClient {
  /// Synchronous. Unary.
  func signIn(_ request: Entry_SignInRequest) throws -> Entry_EntryResponse
  /// Asynchronous. Unary.
  func signIn(_ request: Entry_SignInRequest, completion: @escaping (Entry_EntryResponse?, CallResult) -> Void) throws -> Entry_EntrysSignInCall

  /// Synchronous. Unary.
  func signUp(_ request: Entry_SignUpRequest) throws -> Entry_EntryResponse
  /// Asynchronous. Unary.
  func signUp(_ request: Entry_SignUpRequest, completion: @escaping (Entry_EntryResponse?, CallResult) -> Void) throws -> Entry_EntrysSignUpCall

}

internal final class Entry_EntrysServiceClient: ServiceClientBase, Entry_EntrysService {
  /// Synchronous. Unary.
  internal func signIn(_ request: Entry_SignInRequest) throws -> Entry_EntryResponse {
    return try Entry_EntrysSignInCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func signIn(_ request: Entry_SignInRequest, completion: @escaping (Entry_EntryResponse?, CallResult) -> Void) throws -> Entry_EntrysSignInCall {
    return try Entry_EntrysSignInCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func signUp(_ request: Entry_SignUpRequest) throws -> Entry_EntryResponse {
    return try Entry_EntrysSignUpCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func signUp(_ request: Entry_SignUpRequest, completion: @escaping (Entry_EntryResponse?, CallResult) -> Void) throws -> Entry_EntrysSignUpCall {
    return try Entry_EntrysSignUpCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

}

/// To build a server, implement a class that conforms to this protocol.
/// If one of the methods returning `ServerStatus?` returns nil,
/// it is expected that you have already returned a status to the client by means of `session.close`.
internal protocol Entry_EntrysProvider: ServiceProvider {
  func signIn(request: Entry_SignInRequest, session: Entry_EntrysSignInSession) throws -> Entry_EntryResponse
  func signUp(request: Entry_SignUpRequest, session: Entry_EntrysSignUpSession) throws -> Entry_EntryResponse
}

extension Entry_EntrysProvider {
  internal var serviceName: String { return "entry.Entrys" }

  /// Determines and calls the appropriate request handler, depending on the request's method.
  /// Throws `HandleMethodError.unknownMethod` for methods not handled by this service.
  internal func handleMethod(_ method: String, handler: Handler) throws -> ServerStatus? {
    switch method {
    case "/entry.Entrys/SignIn":
      return try Entry_EntrysSignInSessionBase(
        handler: handler,
        providerBlock: { try self.signIn(request: $0, session: $1 as! Entry_EntrysSignInSessionBase) })
          .run()
    case "/entry.Entrys/SignUp":
      return try Entry_EntrysSignUpSessionBase(
        handler: handler,
        providerBlock: { try self.signUp(request: $0, session: $1 as! Entry_EntrysSignUpSessionBase) })
          .run()
    default:
      throw HandleMethodError.unknownMethod
    }
  }
}

internal protocol Entry_EntrysSignInSession: ServerSessionUnary {}

fileprivate final class Entry_EntrysSignInSessionBase: ServerSessionUnaryBase<Entry_SignInRequest, Entry_EntryResponse>, Entry_EntrysSignInSession {}

internal protocol Entry_EntrysSignUpSession: ServerSessionUnary {}

fileprivate final class Entry_EntrysSignUpSessionBase: ServerSessionUnaryBase<Entry_SignUpRequest, Entry_EntryResponse>, Entry_EntrysSignUpSession {}

