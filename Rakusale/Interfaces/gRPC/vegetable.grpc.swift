//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: vegetable.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import Dispatch
import SwiftGRPC
import SwiftProtobuf

internal protocol Vegetable_VegetablesGetMyBoughtVegetablesCall: ClientCallUnary {}

fileprivate final class Vegetable_VegetablesGetMyBoughtVegetablesCallBase: ClientCallUnaryBase<Vegetable_GetMyVegetablesRequest, Vegetable_GetMyVegetablesResponse>, Vegetable_VegetablesGetMyBoughtVegetablesCall {
  override class var method: String { return "/vegetable.Vegetables/GetMyBoughtVegetables" }
}

internal protocol Vegetable_VegetablesGetMySoldVegetablesCall: ClientCallUnary {}

fileprivate final class Vegetable_VegetablesGetMySoldVegetablesCallBase: ClientCallUnaryBase<Vegetable_GetMyVegetablesRequest, Vegetable_GetMyVegetablesResponse>, Vegetable_VegetablesGetMySoldVegetablesCall {
  override class var method: String { return "/vegetable.Vegetables/GetMySoldVegetables" }
}

internal protocol Vegetable_VegetablesGetAllVegetablesCall: ClientCallUnary {}

fileprivate final class Vegetable_VegetablesGetAllVegetablesCallBase: ClientCallUnaryBase<Vegetable_VegetablesEmpty, Vegetable_GetAllVegetablesResponse>, Vegetable_VegetablesGetAllVegetablesCall {
  override class var method: String { return "/vegetable.Vegetables/GetAllVegetables" }
}

internal protocol Vegetable_VegetablesPostMyVegetableCall: ClientCallUnary {}

fileprivate final class Vegetable_VegetablesPostMyVegetableCallBase: ClientCallUnaryBase<Vegetable_PostMyVegetableRequest, Vegetable_PostMyVegetableResponse>, Vegetable_VegetablesPostMyVegetableCall {
  override class var method: String { return "/vegetable.Vegetables/PostMyVegetable" }
}

internal protocol Vegetable_VegetablesPutMyVegetableCall: ClientCallUnary {}

fileprivate final class Vegetable_VegetablesPutMyVegetableCallBase: ClientCallUnaryBase<Vegetable_PutMyVegetableRequest, Vegetable_PutMyVegetableResponse>, Vegetable_VegetablesPutMyVegetableCall {
  override class var method: String { return "/vegetable.Vegetables/PutMyVegetable" }
}

internal protocol Vegetable_VegetablesDeleteMyVegetableCall: ClientCallUnary {}

fileprivate final class Vegetable_VegetablesDeleteMyVegetableCallBase: ClientCallUnaryBase<Vegetable_DeleteMyVegetableRequest, Vegetable_DeleteMyVegetableResponse>, Vegetable_VegetablesDeleteMyVegetableCall {
  override class var method: String { return "/vegetable.Vegetables/DeleteMyVegetable" }
}


/// Instantiate Vegetable_VegetablesServiceClient, then call methods of this protocol to make API calls.
internal protocol Vegetable_VegetablesService: ServiceClient {
  /// Synchronous. Unary.
  func getMyBoughtVegetables(_ request: Vegetable_GetMyVegetablesRequest) throws -> Vegetable_GetMyVegetablesResponse
  /// Asynchronous. Unary.
  func getMyBoughtVegetables(_ request: Vegetable_GetMyVegetablesRequest, completion: @escaping (Vegetable_GetMyVegetablesResponse?, CallResult) -> Void) throws -> Vegetable_VegetablesGetMyBoughtVegetablesCall

  /// Synchronous. Unary.
  func getMySoldVegetables(_ request: Vegetable_GetMyVegetablesRequest) throws -> Vegetable_GetMyVegetablesResponse
  /// Asynchronous. Unary.
  func getMySoldVegetables(_ request: Vegetable_GetMyVegetablesRequest, completion: @escaping (Vegetable_GetMyVegetablesResponse?, CallResult) -> Void) throws -> Vegetable_VegetablesGetMySoldVegetablesCall

  /// Synchronous. Unary.
  func getAllVegetables(_ request: Vegetable_VegetablesEmpty) throws -> Vegetable_GetAllVegetablesResponse
  /// Asynchronous. Unary.
  func getAllVegetables(_ request: Vegetable_VegetablesEmpty, completion: @escaping (Vegetable_GetAllVegetablesResponse?, CallResult) -> Void) throws -> Vegetable_VegetablesGetAllVegetablesCall

  /// Synchronous. Unary.
  func postMyVegetable(_ request: Vegetable_PostMyVegetableRequest) throws -> Vegetable_PostMyVegetableResponse
  /// Asynchronous. Unary.
  func postMyVegetable(_ request: Vegetable_PostMyVegetableRequest, completion: @escaping (Vegetable_PostMyVegetableResponse?, CallResult) -> Void) throws -> Vegetable_VegetablesPostMyVegetableCall

  /// Synchronous. Unary.
  func putMyVegetable(_ request: Vegetable_PutMyVegetableRequest) throws -> Vegetable_PutMyVegetableResponse
  /// Asynchronous. Unary.
  func putMyVegetable(_ request: Vegetable_PutMyVegetableRequest, completion: @escaping (Vegetable_PutMyVegetableResponse?, CallResult) -> Void) throws -> Vegetable_VegetablesPutMyVegetableCall

  /// Synchronous. Unary.
  func deleteMyVegetable(_ request: Vegetable_DeleteMyVegetableRequest) throws -> Vegetable_DeleteMyVegetableResponse
  /// Asynchronous. Unary.
  func deleteMyVegetable(_ request: Vegetable_DeleteMyVegetableRequest, completion: @escaping (Vegetable_DeleteMyVegetableResponse?, CallResult) -> Void) throws -> Vegetable_VegetablesDeleteMyVegetableCall

}

internal final class Vegetable_VegetablesServiceClient: ServiceClientBase, Vegetable_VegetablesService {
  /// Synchronous. Unary.
  internal func getMyBoughtVegetables(_ request: Vegetable_GetMyVegetablesRequest) throws -> Vegetable_GetMyVegetablesResponse {
    return try Vegetable_VegetablesGetMyBoughtVegetablesCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func getMyBoughtVegetables(_ request: Vegetable_GetMyVegetablesRequest, completion: @escaping (Vegetable_GetMyVegetablesResponse?, CallResult) -> Void) throws -> Vegetable_VegetablesGetMyBoughtVegetablesCall {
    return try Vegetable_VegetablesGetMyBoughtVegetablesCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func getMySoldVegetables(_ request: Vegetable_GetMyVegetablesRequest) throws -> Vegetable_GetMyVegetablesResponse {
    return try Vegetable_VegetablesGetMySoldVegetablesCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func getMySoldVegetables(_ request: Vegetable_GetMyVegetablesRequest, completion: @escaping (Vegetable_GetMyVegetablesResponse?, CallResult) -> Void) throws -> Vegetable_VegetablesGetMySoldVegetablesCall {
    return try Vegetable_VegetablesGetMySoldVegetablesCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func getAllVegetables(_ request: Vegetable_VegetablesEmpty) throws -> Vegetable_GetAllVegetablesResponse {
    return try Vegetable_VegetablesGetAllVegetablesCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func getAllVegetables(_ request: Vegetable_VegetablesEmpty, completion: @escaping (Vegetable_GetAllVegetablesResponse?, CallResult) -> Void) throws -> Vegetable_VegetablesGetAllVegetablesCall {
    return try Vegetable_VegetablesGetAllVegetablesCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func postMyVegetable(_ request: Vegetable_PostMyVegetableRequest) throws -> Vegetable_PostMyVegetableResponse {
    return try Vegetable_VegetablesPostMyVegetableCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func postMyVegetable(_ request: Vegetable_PostMyVegetableRequest, completion: @escaping (Vegetable_PostMyVegetableResponse?, CallResult) -> Void) throws -> Vegetable_VegetablesPostMyVegetableCall {
    return try Vegetable_VegetablesPostMyVegetableCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func putMyVegetable(_ request: Vegetable_PutMyVegetableRequest) throws -> Vegetable_PutMyVegetableResponse {
    return try Vegetable_VegetablesPutMyVegetableCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func putMyVegetable(_ request: Vegetable_PutMyVegetableRequest, completion: @escaping (Vegetable_PutMyVegetableResponse?, CallResult) -> Void) throws -> Vegetable_VegetablesPutMyVegetableCall {
    return try Vegetable_VegetablesPutMyVegetableCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func deleteMyVegetable(_ request: Vegetable_DeleteMyVegetableRequest) throws -> Vegetable_DeleteMyVegetableResponse {
    return try Vegetable_VegetablesDeleteMyVegetableCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func deleteMyVegetable(_ request: Vegetable_DeleteMyVegetableRequest, completion: @escaping (Vegetable_DeleteMyVegetableResponse?, CallResult) -> Void) throws -> Vegetable_VegetablesDeleteMyVegetableCall {
    return try Vegetable_VegetablesDeleteMyVegetableCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

}

/// To build a server, implement a class that conforms to this protocol.
/// If one of the methods returning `ServerStatus?` returns nil,
/// it is expected that you have already returned a status to the client by means of `session.close`.
internal protocol Vegetable_VegetablesProvider: ServiceProvider {
  func getMyBoughtVegetables(request: Vegetable_GetMyVegetablesRequest, session: Vegetable_VegetablesGetMyBoughtVegetablesSession) throws -> Vegetable_GetMyVegetablesResponse
  func getMySoldVegetables(request: Vegetable_GetMyVegetablesRequest, session: Vegetable_VegetablesGetMySoldVegetablesSession) throws -> Vegetable_GetMyVegetablesResponse
  func getAllVegetables(request: Vegetable_VegetablesEmpty, session: Vegetable_VegetablesGetAllVegetablesSession) throws -> Vegetable_GetAllVegetablesResponse
  func postMyVegetable(request: Vegetable_PostMyVegetableRequest, session: Vegetable_VegetablesPostMyVegetableSession) throws -> Vegetable_PostMyVegetableResponse
  func putMyVegetable(request: Vegetable_PutMyVegetableRequest, session: Vegetable_VegetablesPutMyVegetableSession) throws -> Vegetable_PutMyVegetableResponse
  func deleteMyVegetable(request: Vegetable_DeleteMyVegetableRequest, session: Vegetable_VegetablesDeleteMyVegetableSession) throws -> Vegetable_DeleteMyVegetableResponse
}

extension Vegetable_VegetablesProvider {
  internal var serviceName: String { return "vegetable.Vegetables" }

  /// Determines and calls the appropriate request handler, depending on the request's method.
  /// Throws `HandleMethodError.unknownMethod` for methods not handled by this service.
  internal func handleMethod(_ method: String, handler: Handler) throws -> ServerStatus? {
    switch method {
    case "/vegetable.Vegetables/GetMyBoughtVegetables":
      return try Vegetable_VegetablesGetMyBoughtVegetablesSessionBase(
        handler: handler,
        providerBlock: { try self.getMyBoughtVegetables(request: $0, session: $1 as! Vegetable_VegetablesGetMyBoughtVegetablesSessionBase) })
          .run()
    case "/vegetable.Vegetables/GetMySoldVegetables":
      return try Vegetable_VegetablesGetMySoldVegetablesSessionBase(
        handler: handler,
        providerBlock: { try self.getMySoldVegetables(request: $0, session: $1 as! Vegetable_VegetablesGetMySoldVegetablesSessionBase) })
          .run()
    case "/vegetable.Vegetables/GetAllVegetables":
      return try Vegetable_VegetablesGetAllVegetablesSessionBase(
        handler: handler,
        providerBlock: { try self.getAllVegetables(request: $0, session: $1 as! Vegetable_VegetablesGetAllVegetablesSessionBase) })
          .run()
    case "/vegetable.Vegetables/PostMyVegetable":
      return try Vegetable_VegetablesPostMyVegetableSessionBase(
        handler: handler,
        providerBlock: { try self.postMyVegetable(request: $0, session: $1 as! Vegetable_VegetablesPostMyVegetableSessionBase) })
          .run()
    case "/vegetable.Vegetables/PutMyVegetable":
      return try Vegetable_VegetablesPutMyVegetableSessionBase(
        handler: handler,
        providerBlock: { try self.putMyVegetable(request: $0, session: $1 as! Vegetable_VegetablesPutMyVegetableSessionBase) })
          .run()
    case "/vegetable.Vegetables/DeleteMyVegetable":
      return try Vegetable_VegetablesDeleteMyVegetableSessionBase(
        handler: handler,
        providerBlock: { try self.deleteMyVegetable(request: $0, session: $1 as! Vegetable_VegetablesDeleteMyVegetableSessionBase) })
          .run()
    default:
      throw HandleMethodError.unknownMethod
    }
  }
}

internal protocol Vegetable_VegetablesGetMyBoughtVegetablesSession: ServerSessionUnary {}

fileprivate final class Vegetable_VegetablesGetMyBoughtVegetablesSessionBase: ServerSessionUnaryBase<Vegetable_GetMyVegetablesRequest, Vegetable_GetMyVegetablesResponse>, Vegetable_VegetablesGetMyBoughtVegetablesSession {}

internal protocol Vegetable_VegetablesGetMySoldVegetablesSession: ServerSessionUnary {}

fileprivate final class Vegetable_VegetablesGetMySoldVegetablesSessionBase: ServerSessionUnaryBase<Vegetable_GetMyVegetablesRequest, Vegetable_GetMyVegetablesResponse>, Vegetable_VegetablesGetMySoldVegetablesSession {}

internal protocol Vegetable_VegetablesGetAllVegetablesSession: ServerSessionUnary {}

fileprivate final class Vegetable_VegetablesGetAllVegetablesSessionBase: ServerSessionUnaryBase<Vegetable_VegetablesEmpty, Vegetable_GetAllVegetablesResponse>, Vegetable_VegetablesGetAllVegetablesSession {}

internal protocol Vegetable_VegetablesPostMyVegetableSession: ServerSessionUnary {}

fileprivate final class Vegetable_VegetablesPostMyVegetableSessionBase: ServerSessionUnaryBase<Vegetable_PostMyVegetableRequest, Vegetable_PostMyVegetableResponse>, Vegetable_VegetablesPostMyVegetableSession {}

internal protocol Vegetable_VegetablesPutMyVegetableSession: ServerSessionUnary {}

fileprivate final class Vegetable_VegetablesPutMyVegetableSessionBase: ServerSessionUnaryBase<Vegetable_PutMyVegetableRequest, Vegetable_PutMyVegetableResponse>, Vegetable_VegetablesPutMyVegetableSession {}

internal protocol Vegetable_VegetablesDeleteMyVegetableSession: ServerSessionUnary {}

fileprivate final class Vegetable_VegetablesDeleteMyVegetableSessionBase: ServerSessionUnaryBase<Vegetable_DeleteMyVegetableRequest, Vegetable_DeleteMyVegetableResponse>, Vegetable_VegetablesDeleteMyVegetableSession {}

