// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: vegetable.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Vegetable_VegetableType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case squash // = 0
  case cabbage // = 1
  case cucumber // = 2
  case sweetpotato // = 3
  case potato // = 4
  case radish // = 5
  case onion // = 6
  case carrot // = 7
  case bellpepper // = 8
  case spinach // = 9
  case lettuce // = 10
  case UNRECOGNIZED(Int)

  init() {
    self = .squash
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .squash
    case 1: self = .cabbage
    case 2: self = .cucumber
    case 3: self = .sweetpotato
    case 4: self = .potato
    case 5: self = .radish
    case 6: self = .onion
    case 7: self = .carrot
    case 8: self = .bellpepper
    case 9: self = .spinach
    case 10: self = .lettuce
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .squash: return 0
    case .cabbage: return 1
    case .cucumber: return 2
    case .sweetpotato: return 3
    case .potato: return 4
    case .radish: return 5
    case .onion: return 6
    case .carrot: return 7
    case .bellpepper: return 8
    case .spinach: return 9
    case .lettuce: return 10
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Vegetable_VegetableType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Vegetable_VegetableType] = [
    .squash,
    .cabbage,
    .cucumber,
    .sweetpotato,
    .potato,
    .radish,
    .onion,
    .carrot,
    .bellpepper,
    .spinach,
    .lettuce,
  ]
}

#endif  // swift(>=4.2)

struct Vegetable_RequestVegetable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var fee: Int64 = 0

  var isChemical: Bool = false

  var productionDate: String = String()

  var introduction: String = String()

  var category: Vegetable_VegetableType = .squash

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Vegetable_ResponseVegetable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Int64 = 0

  var name: String = String()

  var fee: Int64 = 0

  var isChemical: Bool = false

  var imagePath: String = String()

  var productionDate: String = String()

  var category: Vegetable_VegetableType = .squash

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Get
struct Vegetable_GetMyVegetablesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var token: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Vegetable_GetMyVegetablesResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var status: Int64 = 0

  var vegetables: [Vegetable_ResponseVegetable] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Vegetable_VegetablesEmpty {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Vegetable_GetAllVegetablesResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var vegetables: [Vegetable_ResponseVegetable] = []

  var status: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Vegetable_GetSingleShopAllVegetablesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var shopID: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Vegetable_GetSingleShopAllVegetablesResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var status: Int64 = 0

  var vegetables: [Vegetable_ResponseVegetable] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Create
struct Vegetable_VegetableImage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var data: Data = SwiftProtobuf.Internal.emptyData

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Vegetable_PostMyVegetableRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var token: String {
    get {return _storage._token}
    set {_uniqueStorage()._token = newValue}
  }

  var vegetable: Vegetable_RequestVegetable {
    get {return _storage._vegetable ?? Vegetable_RequestVegetable()}
    set {_uniqueStorage()._vegetable = newValue}
  }
  /// Returns true if `vegetable` has been explicitly set.
  var hasVegetable: Bool {return _storage._vegetable != nil}
  /// Clears the value of `vegetable`. Subsequent reads from it will return its default value.
  mutating func clearVegetable() {_uniqueStorage()._vegetable = nil}

  var image: Vegetable_VegetableImage {
    get {return _storage._image ?? Vegetable_VegetableImage()}
    set {_uniqueStorage()._image = newValue}
  }
  /// Returns true if `image` has been explicitly set.
  var hasImage: Bool {return _storage._image != nil}
  /// Clears the value of `image`. Subsequent reads from it will return its default value.
  mutating func clearImage() {_uniqueStorage()._image = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Vegetable_PostMyVegetableResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var status: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Update
struct Vegetable_PutMyVegetableRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var token: String {
    get {return _storage._token}
    set {_uniqueStorage()._token = newValue}
  }

  var vID: Int64 {
    get {return _storage._vID}
    set {_uniqueStorage()._vID = newValue}
  }

  var vegetable: Vegetable_RequestVegetable {
    get {return _storage._vegetable ?? Vegetable_RequestVegetable()}
    set {_uniqueStorage()._vegetable = newValue}
  }
  /// Returns true if `vegetable` has been explicitly set.
  var hasVegetable: Bool {return _storage._vegetable != nil}
  /// Clears the value of `vegetable`. Subsequent reads from it will return its default value.
  mutating func clearVegetable() {_uniqueStorage()._vegetable = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Vegetable_PutMyVegetableResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var status: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Delete
struct Vegetable_DeleteMyVegetableRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var token: String = String()

  var vID: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Vegetable_DeleteMyVegetableResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var status: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "vegetable"

extension Vegetable_VegetableType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SQUASH"),
    1: .same(proto: "CABBAGE"),
    2: .same(proto: "CUCUMBER"),
    3: .same(proto: "SWEETPOTATO"),
    4: .same(proto: "POTATO"),
    5: .same(proto: "RADISH"),
    6: .same(proto: "ONION"),
    7: .same(proto: "CARROT"),
    8: .same(proto: "BELLPEPPER"),
    9: .same(proto: "SPINACH"),
    10: .same(proto: "LETTUCE"),
  ]
}

extension Vegetable_RequestVegetable: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RequestVegetable"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "fee"),
    2: .same(proto: "isChemical"),
    3: .same(proto: "productionDate"),
    4: .same(proto: "introduction"),
    5: .same(proto: "category"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.fee)
      case 2: try decoder.decodeSingularBoolField(value: &self.isChemical)
      case 3: try decoder.decodeSingularStringField(value: &self.productionDate)
      case 4: try decoder.decodeSingularStringField(value: &self.introduction)
      case 5: try decoder.decodeSingularEnumField(value: &self.category)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.fee != 0 {
      try visitor.visitSingularInt64Field(value: self.fee, fieldNumber: 1)
    }
    if self.isChemical != false {
      try visitor.visitSingularBoolField(value: self.isChemical, fieldNumber: 2)
    }
    if !self.productionDate.isEmpty {
      try visitor.visitSingularStringField(value: self.productionDate, fieldNumber: 3)
    }
    if !self.introduction.isEmpty {
      try visitor.visitSingularStringField(value: self.introduction, fieldNumber: 4)
    }
    if self.category != .squash {
      try visitor.visitSingularEnumField(value: self.category, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Vegetable_RequestVegetable, rhs: Vegetable_RequestVegetable) -> Bool {
    if lhs.fee != rhs.fee {return false}
    if lhs.isChemical != rhs.isChemical {return false}
    if lhs.productionDate != rhs.productionDate {return false}
    if lhs.introduction != rhs.introduction {return false}
    if lhs.category != rhs.category {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Vegetable_ResponseVegetable: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ResponseVegetable"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .same(proto: "fee"),
    4: .same(proto: "isChemical"),
    5: .same(proto: "imagePath"),
    6: .same(proto: "productionDate"),
    7: .same(proto: "category"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.name)
      case 3: try decoder.decodeSingularInt64Field(value: &self.fee)
      case 4: try decoder.decodeSingularBoolField(value: &self.isChemical)
      case 5: try decoder.decodeSingularStringField(value: &self.imagePath)
      case 6: try decoder.decodeSingularStringField(value: &self.productionDate)
      case 7: try decoder.decodeSingularEnumField(value: &self.category)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if self.fee != 0 {
      try visitor.visitSingularInt64Field(value: self.fee, fieldNumber: 3)
    }
    if self.isChemical != false {
      try visitor.visitSingularBoolField(value: self.isChemical, fieldNumber: 4)
    }
    if !self.imagePath.isEmpty {
      try visitor.visitSingularStringField(value: self.imagePath, fieldNumber: 5)
    }
    if !self.productionDate.isEmpty {
      try visitor.visitSingularStringField(value: self.productionDate, fieldNumber: 6)
    }
    if self.category != .squash {
      try visitor.visitSingularEnumField(value: self.category, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Vegetable_ResponseVegetable, rhs: Vegetable_ResponseVegetable) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs.fee != rhs.fee {return false}
    if lhs.isChemical != rhs.isChemical {return false}
    if lhs.imagePath != rhs.imagePath {return false}
    if lhs.productionDate != rhs.productionDate {return false}
    if lhs.category != rhs.category {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Vegetable_GetMyVegetablesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetMyVegetablesRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "token"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.token)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.token.isEmpty {
      try visitor.visitSingularStringField(value: self.token, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Vegetable_GetMyVegetablesRequest, rhs: Vegetable_GetMyVegetablesRequest) -> Bool {
    if lhs.token != rhs.token {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Vegetable_GetMyVegetablesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetMyVegetablesResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "vegetables"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.status)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.vegetables)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt64Field(value: self.status, fieldNumber: 1)
    }
    if !self.vegetables.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.vegetables, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Vegetable_GetMyVegetablesResponse, rhs: Vegetable_GetMyVegetablesResponse) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.vegetables != rhs.vegetables {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Vegetable_VegetablesEmpty: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".VegetablesEmpty"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Vegetable_VegetablesEmpty, rhs: Vegetable_VegetablesEmpty) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Vegetable_GetAllVegetablesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetAllVegetablesResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "vegetables"),
    2: .same(proto: "status"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.vegetables)
      case 2: try decoder.decodeSingularInt64Field(value: &self.status)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.vegetables.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.vegetables, fieldNumber: 1)
    }
    if self.status != 0 {
      try visitor.visitSingularInt64Field(value: self.status, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Vegetable_GetAllVegetablesResponse, rhs: Vegetable_GetAllVegetablesResponse) -> Bool {
    if lhs.vegetables != rhs.vegetables {return false}
    if lhs.status != rhs.status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Vegetable_GetSingleShopAllVegetablesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetSingleShopAllVegetablesRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "shopId"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.shopID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.shopID != 0 {
      try visitor.visitSingularInt64Field(value: self.shopID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Vegetable_GetSingleShopAllVegetablesRequest, rhs: Vegetable_GetSingleShopAllVegetablesRequest) -> Bool {
    if lhs.shopID != rhs.shopID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Vegetable_GetSingleShopAllVegetablesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetSingleShopAllVegetablesResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "vegetables"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.status)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.vegetables)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt64Field(value: self.status, fieldNumber: 1)
    }
    if !self.vegetables.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.vegetables, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Vegetable_GetSingleShopAllVegetablesResponse, rhs: Vegetable_GetSingleShopAllVegetablesResponse) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.vegetables != rhs.vegetables {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Vegetable_VegetableImage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".VegetableImage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.data)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.data.isEmpty {
      try visitor.visitSingularBytesField(value: self.data, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Vegetable_VegetableImage, rhs: Vegetable_VegetableImage) -> Bool {
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Vegetable_PostMyVegetableRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PostMyVegetableRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "token"),
    2: .same(proto: "vegetable"),
    3: .same(proto: "image"),
  ]

  fileprivate class _StorageClass {
    var _token: String = String()
    var _vegetable: Vegetable_RequestVegetable? = nil
    var _image: Vegetable_VegetableImage? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _token = source._token
      _vegetable = source._vegetable
      _image = source._image
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._token)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._vegetable)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._image)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._token.isEmpty {
        try visitor.visitSingularStringField(value: _storage._token, fieldNumber: 1)
      }
      if let v = _storage._vegetable {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._image {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Vegetable_PostMyVegetableRequest, rhs: Vegetable_PostMyVegetableRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._token != rhs_storage._token {return false}
        if _storage._vegetable != rhs_storage._vegetable {return false}
        if _storage._image != rhs_storage._image {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Vegetable_PostMyVegetableResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PostMyVegetableResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.status)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt64Field(value: self.status, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Vegetable_PostMyVegetableResponse, rhs: Vegetable_PostMyVegetableResponse) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Vegetable_PutMyVegetableRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PutMyVegetableRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "token"),
    2: .standard(proto: "v_id"),
    3: .same(proto: "vegetable"),
  ]

  fileprivate class _StorageClass {
    var _token: String = String()
    var _vID: Int64 = 0
    var _vegetable: Vegetable_RequestVegetable? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _token = source._token
      _vID = source._vID
      _vegetable = source._vegetable
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._token)
        case 2: try decoder.decodeSingularInt64Field(value: &_storage._vID)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._vegetable)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._token.isEmpty {
        try visitor.visitSingularStringField(value: _storage._token, fieldNumber: 1)
      }
      if _storage._vID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._vID, fieldNumber: 2)
      }
      if let v = _storage._vegetable {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Vegetable_PutMyVegetableRequest, rhs: Vegetable_PutMyVegetableRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._token != rhs_storage._token {return false}
        if _storage._vID != rhs_storage._vID {return false}
        if _storage._vegetable != rhs_storage._vegetable {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Vegetable_PutMyVegetableResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PutMyVegetableResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.status)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt64Field(value: self.status, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Vegetable_PutMyVegetableResponse, rhs: Vegetable_PutMyVegetableResponse) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Vegetable_DeleteMyVegetableRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DeleteMyVegetableRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "token"),
    2: .standard(proto: "v_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.token)
      case 2: try decoder.decodeSingularInt64Field(value: &self.vID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.token.isEmpty {
      try visitor.visitSingularStringField(value: self.token, fieldNumber: 1)
    }
    if self.vID != 0 {
      try visitor.visitSingularInt64Field(value: self.vID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Vegetable_DeleteMyVegetableRequest, rhs: Vegetable_DeleteMyVegetableRequest) -> Bool {
    if lhs.token != rhs.token {return false}
    if lhs.vID != rhs.vID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Vegetable_DeleteMyVegetableResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DeleteMyVegetableResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.status)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt64Field(value: self.status, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Vegetable_DeleteMyVegetableResponse, rhs: Vegetable_DeleteMyVegetableResponse) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
